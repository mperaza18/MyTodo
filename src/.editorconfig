root = true

# All files
[*]
indent_style = space
end_of_line = crlf
insert_final_newline = true
trim_trailing_whitespace = true

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
charset = utf-8

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.{json,json5}]
indent_size = 2

# YAML files
[*.{yml,yaml}]
indent_size = 2

# Markdown files
[*.md]
trim_trailing_whitespace = false

# Web files
[*.{htm,html,js,ts,tsx,css,sass,scss,less,svg,vue}]
indent_size = 2

# Batch files
[*.{cmd,bat}]
end_of_line = crlf

# Bash files
[*.sh]
end_of_line = lf

# C# files
[*.cs]

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = true
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning

# Expression-level preferences
dotnet_style_coalesce_expression = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

# New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:warning
dotnet_style_allow_statement_immediately_after_block_experimental = false:warning

# C# preferences
csharp_using_directive_placement = outside_namespace:warning

# var preferences
csharp_style_var_elsewhere = false:warning
csharp_style_var_for_built_in_types = false:warning
csharp_style_var_when_type_is_apparent = true:warning

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:warning
csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_indexers = true:warning
csharp_style_expression_bodied_lambdas = true:warning
csharp_style_expression_bodied_local_functions = false:warning
csharp_style_expression_bodied_methods = false:warning
csharp_style_expression_bodied_operators = false:warning
csharp_style_expression_bodied_properties = true:warning

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_extended_property_pattern = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = true:silent
csharp_style_prefer_switch_expression = true:warning

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_local_functions = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning

# Code-block preferences
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = true:warning
csharp_style_namespace_declarations = file_scoped:warning
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent

# Expression-level preferences
csharp_prefer_simple_default_expression = true:warning
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_local_over_anonymous_function = true:warning
csharp_style_prefer_null_check_over_type_check = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_prefer_tuple_swap = true:warning
csharp_style_throw_expression = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

# New line preferences
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false:warning
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:warning
csharp_style_allow_embedded_statements_on_same_line_experimental = false:warning

# Formatting Rules

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true

# Naming Conventions

# Constant fields should be PascalCase
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Static readonly fields should be PascalCase
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

# Private fields should be camelCase with underscore prefix
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.severity = warning
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.symbols = private_fields
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.style = camel_case_with_underscore_style

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private

# Public fields should be PascalCase
dotnet_naming_rule.public_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.public_fields_should_be_pascal_case.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal, protected, protected_internal, private_protected

# Properties should be PascalCase
dotnet_naming_rule.properties_should_be_pascal_case.severity = warning
dotnet_naming_rule.properties_should_be_pascal_case.symbols = properties
dotnet_naming_rule.properties_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.properties.applicable_kinds = property

# Methods should be PascalCase
dotnet_naming_rule.methods_should_be_pascal_case.severity = warning
dotnet_naming_rule.methods_should_be_pascal_case.symbols = methods
dotnet_naming_rule.methods_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.methods.applicable_kinds = method

# Classes, structs, enums, interfaces, delegates should be PascalCase
dotnet_naming_rule.types_should_be_pascal_case.severity = warning
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.types.applicable_kinds = class, struct, enum, interface, delegate

# Interfaces should be PascalCase with I prefix
dotnet_naming_rule.interfaces_should_be_pascal_case_with_i_prefix.severity = warning
dotnet_naming_rule.interfaces_should_be_pascal_case_with_i_prefix.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_pascal_case_with_i_prefix.style = pascal_case_with_i_prefix_style

dotnet_naming_symbols.interfaces.applicable_kinds = interface

# Type parameters should be PascalCase with T prefix
dotnet_naming_rule.type_parameters_should_be_pascal_case_with_t_prefix.severity = warning
dotnet_naming_rule.type_parameters_should_be_pascal_case_with_t_prefix.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_pascal_case_with_t_prefix.style = pascal_case_with_t_prefix_style

dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter

# Local variables and parameters should be camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = warning
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

# Naming styles
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

dotnet_naming_style.camel_case_style.capitalization = camel_case

dotnet_naming_style.camel_case_with_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_case_with_underscore_style.required_prefix = _

dotnet_naming_style.pascal_case_with_i_prefix_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_with_i_prefix_style.required_prefix = I

dotnet_naming_style.pascal_case_with_t_prefix_style.capitalization = pascal_case
dotnet_naming_style.pascal_case_with_t_prefix_style.required_prefix = T

# Diagnostic Rules - Set common issues as errors

# CS8600: Converting null literal or possible null value to non-nullable type
dotnet_diagnostic.CS8600.severity = error

# CS8601: Possible null reference assignment
dotnet_diagnostic.CS8601.severity = error

# CS8602: Dereference of a possibly null reference
dotnet_diagnostic.CS8602.severity = error

# CS8603: Possible null reference return
dotnet_diagnostic.CS8603.severity = error

# CS8604: Possible null reference argument
dotnet_diagnostic.CS8604.severity = error

# CS8618: Non-nullable field must contain a non-null value when exiting constructor
dotnet_diagnostic.CS8618.severity = error

# CS8625: Cannot convert null literal to non-nullable reference type
dotnet_diagnostic.CS8625.severity = error

# Unused variables
dotnet_diagnostic.CS0168.severity = error  # Variable declared but never used
dotnet_diagnostic.CS0219.severity = error  # Variable assigned but never used

# Unreachable code
dotnet_diagnostic.CS0162.severity = error

# Missing awaits
dotnet_diagnostic.CS4014.severity = error  # Call not awaited

# Async method lacks 'await' operators
dotnet_diagnostic.CS1998.severity = warning

# Use of obsolete members
dotnet_diagnostic.CS0612.severity = error
dotnet_diagnostic.CS0618.severity = error

# Missing XML comments (if you want to enforce documentation)
# dotnet_diagnostic.CS1591.severity = warning

# CA rules for code analysis
dotnet_diagnostic.CA1012.severity = error   # Abstract types should not have constructors
dotnet_diagnostic.CA1031.severity = warning # Do not catch general exception types
dotnet_diagnostic.CA1040.severity = error   # Avoid empty interfaces
dotnet_diagnostic.CA1063.severity = error   # Implement IDisposable correctly
dotnet_diagnostic.CA1305.severity = warning # Specify IFormatProvider
dotnet_diagnostic.CA1307.severity = warning # Specify StringComparison
dotnet_diagnostic.CA1310.severity = warning # Specify StringComparison for correctness
dotnet_diagnostic.CA1416.severity = error   # Validate platform compatibility
dotnet_diagnostic.CA1507.severity = error   # Use nameof to express symbol names
dotnet_diagnostic.CA1508.severity = error   # Avoid dead conditional code
dotnet_diagnostic.CA1802.severity = error   # Use literals where appropriate
dotnet_diagnostic.CA1805.severity = error   # Do not initialize unnecessarily
dotnet_diagnostic.CA1812.severity = error   # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1822.severity = warning # Mark members as static
dotnet_diagnostic.CA1823.severity = error   # Avoid unused private fields
dotnet_diagnostic.CA1825.severity = error   # Avoid zero-length array allocations
dotnet_diagnostic.CA1826.severity = error   # Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1827.severity = error   # Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1828.severity = error   # Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1829.severity = error   # Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1834.severity = error   # Consider using 'StringBuilder.Append(char)' instead of 'StringBuilder.Append(string)'
dotnet_diagnostic.CA1835.severity = error   # Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1836.severity = error   # Prefer IsEmpty over Count
dotnet_diagnostic.CA1837.severity = error   # Use 'Environment.ProcessId'
dotnet_diagnostic.CA1838.severity = error   # Avoid 'StringBuilder' parameters for P/Invokes
#dotnet_diagnostic.CA2007.severity = error   # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2016.severity = error   # Forward the 'CancellationToken' parameter